% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EICParams.R
\name{EICparams}
\alias{EICparams}
\title{EICparams}
\usage{
EICparams(Autotuner, massThresh, useGap = TRUE, varExpThresh = 0.8,
  returnPpmPlots = TRUE, plotDir = ".", verbose = TRUE)
}
\arguments{
\item{Autotuner}{- An Autotuner objected containing sample specific raw
data.}

\item{massThresh}{- A generous exact mass error threshold used to estimate
PPM for features.}

\item{useGap}{- Parameter carried into checkEICPeaks that tells Autotuner
whether to use the gap statustic to determine the proper number of clusters
to use during ppm parameter estimation.}

\item{varExpThresh}{- Numeric value representing the variance explained
threshold to use if useGap is false.}

\item{returnPpmPlots}{- Boolean value that tells R to return plots for
ppm distributions.}

\item{plotDir}{- Path where to store plots.}

\item{verbose}{- Boolean value used to indicate whether checkEICPeaks
function returns messages to the console.}
}
\value{
A data.frame of all peak specific estimates.
}
\description{
This function is designed to calculate the recommended
parameters from EIC peaks. It is the main holder function for a lot of
different ones involved in calculating EIC parameters.
}
\details{
The function CheckEICPeaks handles all the peak specific
computations.
}
\examples{
library(devtools)
if(!require("mmetspData")) {
    install_github("crmclean/mmetspData")
}
library(mmetspData)
mmetspFiles <- c(system.file("mzMLs/mtab_mmetsp_ft_120815_24.mzML",
package = "mmetspData"), system.file("mzMLs/mtab_mmetsp_ft_120815_25.mzML",
package = "mmetspData"), system.file("mzMLs/mtab_mmetsp_ft_120815_26.mzML",
package = "mmetspData"))
metadata <- read.csv(system.file("mmetsp_metadata.csv",
package = "mmetspData"),stringsAsFactors = FALSE)
metadata <- metadata[metadata$File.Name \%in\%
sub(pattern = ".mzML", "",basename(mmetspFiles)),]
Autotuner <- createAutotuner(mmetspFiles, metadata,
file_col = "File.Name", factorCol = "Sample.Type")

lag <- 25
threshold <- 3.1
influence <- 0.1

signals <- lapply(getAutoIntensity(Autotuner),
ThresholdingAlgo, lag, threshold, influence)

Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signals)

EICparams(Autotuner = Autotuner, massThresh = .005, verbose = FALSE,
returnPpmPlots = FALSE, useGap = TRUE)

}
