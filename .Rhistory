factorCol <- Autotuner@factorCol
metadata <- Autotuner@metadata
peak_difference <- Autotuner@peak_difference
peak_table <- Autotuner@peak_table
peak_difference <- peak_difference %>%
dplyr::filter(.data$index == peak)
#peak_table <- peak_table
sample_names <- unlist(metadata[,factorCol])
sample_names <- paste(sample_names, 1:length(sample_names))
row <- 1
peak_counter <- 1
checkPeaks <- c(peak_difference$cur_row, peak_difference$next_row)
## ploting the peaks
lapply(1:length(checkPeaks), function(row_index) {
## renaming info for clarity
current_row <- checkPeaks[row_index]
sample_index <- peak_table$Sample[current_row]
## extracting relevant info to plot figures
bdd_names <- peak_table[current_row,] %>%
dplyr::select(dplyr::contains("name"))
time <- Autotuner@time[[sample_index]]
intensity <- Autotuner@intensity[[sample_index]]
bdd_points <- which(names(time) %in% unlist(bdd_names))
peak_interval <- c(0,0)
if((bdd_points[1] - boundary) < 1) {
peak_interval[1] <- 1
} else {
peak_interval[1] <- bdd_points[1]-boundary
}
if((bdd_points[2]+boundary) > length(time)) {
peak_interval[2] <- length(time)
} else {
peak_interval[2] <- bdd_points[2]+boundary
}
peak_interval <- peak_interval[1]:peak_interval[2]
if(row_index == 1) {
upper_bdd <- peak_difference$max_intensity[row] +
peak_difference$max_intensity[row]/
log(peak_difference$max_intensity[row])
plot(x = time[peak_interval], y = intensity[peak_interval],
type = "l",
xlab = "Time (s)",
ylab = "Intensity",
main = paste("Max Peak Width:",
signif(max(peak_difference$Max_width)), "(s)"),
col = colors[peak_table$Sample[current_row]],
ylim = c(0, upper_bdd))
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
} else {
lines(time[peak_interval],
intensity[peak_interval],
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
}
}) # end of plotting function
legend("topleft",
legend = sample_names[peak_table$Sample[match_rows]],
col = colors,
cex = 0.75,
fill = which(sample_names %in%
sample_names[peak_table$Sample[match_rows]]))
sample_names
# extracting relevant values from input args ------------------------------
factorCol <- Autotuner@factorCol
metadata <- Autotuner@metadata
peak_difference <- Autotuner@peak_difference
peak_table <- Autotuner@peak_table
peak_difference <- peak_difference %>%
dplyr::filter(.data$index == peak)
peak_difference
#peak_table <- peak_table
sample_names <- unlist(metadata[,factorCol])
sample_names <- paste(sample_names, 1:length(sample_names))
sample_names
row <- 1
peak_counter <- 1
peak_difference
checkPeaks <- c(peak_difference$cur_row, peak_difference$next_row)
peak_table
current_row
checkPeaks
sample_index <- peak_table$Sample[checkPeaks]
sample_index
match_rows
match_rows
sample_index
peak_table$Sample[sample_index]
checkPeaks
peak_table$Sample[checkPeaks]
colors <- 1:length(unique(peak_table$Sample))
legend("topleft",
legend = sample_names[peak_table$Sample[checkPeaks]],
col = colors,
cex = 0.75,
fill = which(sample_names %in%
sample_names[peak_table$Sample[match_rows]]))
colors
legend("topleft",
legend = sample_names[peak_table$Sample[checkPeaks]],
col = colors[checkPeaks],
cex = 0.75,
fill = which(sample_names %in%
sample_names[peak_table$Sample[match_rows]]))
checkPeaks
sample_names
peak_table$Sample[checkPeaks]
sampleIds <- peak_table$Sample[checkPeaks]
legend("topleft",
legend = sample_names[sampleIds],
col = colors[sampleIds],
cex = 0.75,
fill = which(sample_names %in%
sample_names[peak_table$Sample[match_rows]]))
source('~/MIT/Research/Autotuner/R/plot_peaks.R', echo=TRUE)
mmetspFiles <- "~/Desktop/metabolomics_data/testing_autotuner/2019-07-21_christina_lukas/RawData_EICParamEst"
mmetspFiles <- file.path(mmetspFiles, list.files(mmetspFiles, pattern = ".mzML"))
metadata <- read.csv2("~/Desktop/metabolomics_data/testing_autotuner/2019-07-21_christina_lukas/meta_EICParamsEst.csv",
sep = ";", fileEncoding="latin1")
metadata <- metadata[metadata$Source.Name %in%
sub(pattern = ".mzML", "",basename(mmetspFiles)),]
Autotuner <- createAutotuner(data_paths = mmetspFiles,
runfile = metadata,
file_col = "Source.Name",
factorCol = "Characteristics.Organism.part.")
lag <- 11
threshold<- 3.6
influence <- 0.2
signals <- lapply(getAutoIntensity(Autotuner),
ThresholdingAlgo, lag, threshold, influence)
plot_signals(Autotuner,
threshold,
## index for which data files should be displayed
sample_index = 1:4,
signals = signals)
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signals)
library(Autotuner)
library(Autotuner)
mmetspFiles <- "~/Desktop/metabolomics_data/testing_autotuner/2019-07-21_christina_lukas/RawData_EICParamEst"
mmetspFiles <- file.path(mmetspFiles, list.files(mmetspFiles, pattern = ".mzML"))
metadata <- read.csv2("~/Desktop/metabolomics_data/testing_autotuner/2019-07-21_christina_lukas/meta_EICParamsEst.csv",
sep = ";", fileEncoding="latin1")
metadata <- metadata[metadata$Source.Name %in%
sub(pattern = ".mzML", "",basename(mmetspFiles)),]
Autotuner <- createAutotuner(data_paths = mmetspFiles,
runfile = metadata,
file_col = "Source.Name",
factorCol = "Characteristics.Organism.part.")
lag <- 11
threshold<- 3.6
influence <- 0.2
signals <- lapply(getAutoIntensity(Autotuner),
ThresholdingAlgo, lag, threshold, influence)
plot_signals(Autotuner,
threshold,
## index for which data files should be displayed
sample_index = 1:4,
signals = signals)
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signals)
for(i in 1:10) {
plot_peaks(Autotuner = Autotuner,
boundary = 100,
peak = i)
}
for(i in 1:10) {
plot_peaks(Autotuner = Autotuner,
boundary = 100,
peak = i)
}
boundary = 10
# extracting relevant values from input args ------------------------------
factorCol <- Autotuner@factorCol
metadata <- Autotuner@metadata
peak_difference <- Autotuner@peak_difference
peak_table <- Autotuner@peak_table
peak_table
peak
peak <- 1
peak_difference <- peak_difference %>%
dplyr::filter(.data$index == peak)
peak_difference
#peak_table <- peak_table
sample_names <- unlist(metadata[,factorCol])
sample_names <- paste(sample_names, 1:length(sample_names))
sample_index <- peak_table$Sample[checkPeaks]
sample_index
#peak_table <- peak_table
sample_names <- unlist(metadata[,factorCol])
sample_names <- paste(sample_names, 1:length(sample_names))
sample_index <- peak_table$Sample[checkPeaks]
colors <- 1:length(unique(peak_table$Sample))
row <- 1
peak_counter <- 1
checkPeaks <- c(peak_difference$cur_row, peak_difference$next_row)
sample_index <- peak_table$Sample[checkPeaks]
checkPeaks
checkPeaks <- c(peak_difference$cur_row[1], peak_difference$next_row)
checkPeaks
sample_index <- peak_table$Sample[checkPeaks]
sample_index
checkPeaks
## ploting the peaks
lapply(1:length(checkPeaks), function(row_index) {
## renaming info for clarity
current_row <- checkPeaks[row_index]
sample_index <- peak_table$Sample[current_row]
## extracting relevant info to plot figures
bdd_names <- peak_table[current_row,] %>%
dplyr::select(dplyr::contains("name"))
time <- Autotuner@time[[sample_index]]
intensity <- Autotuner@intensity[[sample_index]]
bdd_points <- which(names(time) %in% unlist(bdd_names))
peak_interval <- c(0,0)
if((bdd_points[1] - boundary) < 1) {
peak_interval[1] <- 1
} else {
peak_interval[1] <- bdd_points[1]-boundary
}
if((bdd_points[2]+boundary) > length(time)) {
peak_interval[2] <- length(time)
} else {
peak_interval[2] <- bdd_points[2]+boundary
}
peak_interval <- peak_interval[1]:peak_interval[2]
if(row_index == 1) {
upper_bdd <- peak_difference$max_intensity[row] +
peak_difference$max_intensity[row]/
log(peak_difference$max_intensity[row])
plot(x = time[peak_interval], y = intensity[peak_interval],
type = "l",
xlab = "Time (s)",
ylab = "Intensity",
main = paste("Max Peak Width:",
signif(max(peak_difference$Max_width)), "(s)"),
col = colors[peak_table$Sample[current_row]],
ylim = c(0, upper_bdd))
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
} else {
lines(time[peak_interval],
intensity[peak_interval],
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
}
}) # end of plotting function
sampleIds <- peak_table$Sample[checkPeaks]
sampleIds
legend("topleft",
legend = sample_names[sampleIds],
col = colors[sampleIds],
cex = 0.75,
fill = which(sample_names %in%
sample_names[peak_table$Sample[match_rows]]))
peak_table
peak_table$Sample
legend("topleft",
legend = sample_names[sampleIds],
col = colors[sampleIds],
cex = 0.75,
fill = which(sample_names %in%
sample_names[peak_table$Sample[checkPeaks]]))
source('~/MIT/Research/Autotuner/R/plot_peaks.R', echo=TRUE)
for(i in 1:10) {
plot_peaks(Autotuner = Autotuner,
boundary = 100,
peak = i)
}
mmetspFiles <- "~/Desktop/metabolomics_data/testing_autotuner/2019-07-21_christina_lukas/RawData_EICParamEst"
mmetspFiles <- file.path(mmetspFiles, list.files(mmetspFiles, pattern = ".mzML"))
metadata <- read.csv2("~/Desktop/metabolomics_data/testing_autotuner/2019-07-21_christina_lukas/meta_EICParamsEst.csv",
sep = ";", fileEncoding="latin1")
metadata <- metadata[metadata$Source.Name %in%
sub(pattern = ".mzML", "",basename(mmetspFiles)),]
Autotuner <- createAutotuner(data_paths = mmetspFiles,
runfile = metadata,
file_col = "Source.Name",
factorCol = "Characteristics.Organism.part.")
lag <- 11
threshold<- 3.6
influence <- 0.2
signals <- lapply(getAutoIntensity(Autotuner),
ThresholdingAlgo, lag, threshold, influence)
plot_signals(Autotuner,
threshold,
## index for which data files should be displayed
sample_index = 1:4,
signals = signals)
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signals)
peak <- 2
# extracting relevant values from input args ------------------------------
factorCol <- Autotuner@factorCol
metadata <- Autotuner@metadata
peak_difference <- Autotuner@peak_difference
peak_table <- Autotuner@peak_table
peak_difference <- peak_difference %>%
dplyr::filter(.data$index == peak)
#peak_table <- peak_table
sample_names <- unlist(metadata[,factorCol])
sample_names <- paste(sample_names, 1:length(sample_names))
colors <- 1:length(unique(peak_table$Sample))
row <- 1
peak_counter <- 1
checkPeaks <- c(peak_difference$cur_row[1], peak_difference$next_row)
sample_index <- peak_table$Sample[checkPeaks]
## ploting the peaks
lapply(1:length(checkPeaks), function(row_index) {
## renaming info for clarity
current_row <- checkPeaks[row_index]
sample_index <- peak_table$Sample[current_row]
## extracting relevant info to plot figures
bdd_names <- peak_table[current_row,] %>%
dplyr::select(dplyr::contains("name"))
time <- Autotuner@time[[sample_index]]
intensity <- Autotuner@intensity[[sample_index]]
bdd_points <- which(names(time) %in% unlist(bdd_names))
peak_interval <- c(0,0)
if((bdd_points[1] - boundary) < 1) {
peak_interval[1] <- 1
} else {
peak_interval[1] <- bdd_points[1]-boundary
}
if((bdd_points[2]+boundary) > length(time)) {
peak_interval[2] <- length(time)
} else {
peak_interval[2] <- bdd_points[2]+boundary
}
peak_interval <- peak_interval[1]:peak_interval[2]
if(row_index == 1) {
upper_bdd <- peak_difference$max_intensity[row] +
peak_difference$max_intensity[row]/
log(peak_difference$max_intensity[row])
plot(x = time[peak_interval], y = intensity[peak_interval],
type = "l",
xlab = "Time (s)",
ylab = "Intensity",
main = paste("Max Peak Width:",
signif(max(peak_difference$Max_width)), "(s)"),
col = colors[peak_table$Sample[current_row]],
ylim = c(0, upper_bdd))
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
} else {
lines(time[peak_interval],
intensity[peak_interval],
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
}
}) # end of plotting function
boundary = 10
## ploting the peaks
lapply(1:length(checkPeaks), function(row_index) {
## renaming info for clarity
current_row <- checkPeaks[row_index]
sample_index <- peak_table$Sample[current_row]
## extracting relevant info to plot figures
bdd_names <- peak_table[current_row,] %>%
dplyr::select(dplyr::contains("name"))
time <- Autotuner@time[[sample_index]]
intensity <- Autotuner@intensity[[sample_index]]
bdd_points <- which(names(time) %in% unlist(bdd_names))
peak_interval <- c(0,0)
if((bdd_points[1] - boundary) < 1) {
peak_interval[1] <- 1
} else {
peak_interval[1] <- bdd_points[1]-boundary
}
if((bdd_points[2]+boundary) > length(time)) {
peak_interval[2] <- length(time)
} else {
peak_interval[2] <- bdd_points[2]+boundary
}
peak_interval <- peak_interval[1]:peak_interval[2]
if(row_index == 1) {
upper_bdd <- peak_difference$max_intensity[row] +
peak_difference$max_intensity[row]/
log(peak_difference$max_intensity[row])
plot(x = time[peak_interval], y = intensity[peak_interval],
type = "l",
xlab = "Time (s)",
ylab = "Intensity",
main = paste("Max Peak Width:",
signif(max(peak_difference$Max_width)), "(s)"),
col = colors[peak_table$Sample[current_row]],
ylim = c(0, upper_bdd))
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
} else {
lines(time[peak_interval],
intensity[peak_interval],
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
}
}) # end of plotting function
peak <- 1
# extracting relevant values from input args ------------------------------
factorCol <- Autotuner@factorCol
metadata <- Autotuner@metadata
peak_difference <- Autotuner@peak_difference
peak_table <- Autotuner@peak_table
peak_difference <- peak_difference %>%
dplyr::filter(.data$index == peak)
#peak_table <- peak_table
sample_names <- unlist(metadata[,factorCol])
sample_names <- paste(sample_names, 1:length(sample_names))
colors <- 1:length(unique(peak_table$Sample))
row <- 1
peak_counter <- 1
checkPeaks <- c(peak_difference$cur_row[1], peak_difference$next_row)
sample_index <- peak_table$Sample[checkPeaks]
## ploting the peaks
lapply(1:length(checkPeaks), function(row_index) {
## renaming info for clarity
current_row <- checkPeaks[row_index]
sample_index <- peak_table$Sample[current_row]
## extracting relevant info to plot figures
bdd_names <- peak_table[current_row,] %>%
dplyr::select(dplyr::contains("name"))
time <- Autotuner@time[[sample_index]]
intensity <- Autotuner@intensity[[sample_index]]
bdd_points <- which(names(time) %in% unlist(bdd_names))
peak_interval <- c(0,0)
if((bdd_points[1] - boundary) < 1) {
peak_interval[1] <- 1
} else {
peak_interval[1] <- bdd_points[1]-boundary
}
if((bdd_points[2]+boundary) > length(time)) {
peak_interval[2] <- length(time)
} else {
peak_interval[2] <- bdd_points[2]+boundary
}
peak_interval <- peak_interval[1]:peak_interval[2]
if(row_index == 1) {
upper_bdd <- peak_difference$max_intensity[row] +
peak_difference$max_intensity[row]/
log(peak_difference$max_intensity[row])
plot(x = time[peak_interval], y = intensity[peak_interval],
type = "l",
xlab = "Time (s)",
ylab = "Intensity",
main = paste("Max Peak Width:",
signif(max(peak_difference$Max_width)), "(s)"),
col = colors[peak_table$Sample[current_row]],
ylim = c(0, upper_bdd))
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
} else {
lines(time[peak_interval],
intensity[peak_interval],
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
}
}) # end of plotting function
sampleIds <- peak_table$Sample[checkPeaks]
legend("topleft",
legend = sample_names[sampleIds],
col = colors[sampleIds],
cex = 0.75,
fill = which(sample_names %in%
sample_names[peak_table$Sample[checkPeaks]]))
library(Autotuner)
mmetspFiles <- "~/Desktop/metabolomics_data/testing_autotuner/2019-07-21_christina_lukas/RawData_EICParamEst"
mmetspFiles <- file.path(mmetspFiles, list.files(mmetspFiles, pattern = ".mzML"))
metadata <- read.csv2("~/Desktop/metabolomics_data/testing_autotuner/2019-07-21_christina_lukas/meta_EICParamsEst.csv",
sep = ";", fileEncoding="latin1")
metadata <- metadata[metadata$Source.Name %in%
sub(pattern = ".mzML", "",basename(mmetspFiles)),]
Autotuner <- createAutotuner(data_paths = mmetspFiles,
runfile = metadata,
file_col = "Source.Name",
factorCol = "Characteristics.Organism.part.")
lag <- 11
threshold<- 3.6
influence <- 0.2
signals <- lapply(getAutoIntensity(Autotuner),
ThresholdingAlgo, lag, threshold, influence)
plot_signals(Autotuner,
threshold,
## index for which data files should be displayed
sample_index = 1:4,
signals = signals)
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signals)
for(i in 1:10) {
plot_peaks(Autotuner = Autotuner,
boundary = 100,
peak = i)
}
