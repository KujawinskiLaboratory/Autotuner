lag <- 20
threshold<- 3
influence <- 0.1
signal <- lapply(getAutoIntensity(Autotuner), ThresholdingAlgo, lag, threshold,
influence)
test_that(desc = "Signal Processing Structure", code = {
## check that the correct object is returned from signal function
expect_equal(length(signal), 3)
expect_equal(length(signal[[1]]), 3)
expect_equal(length(signal[[2]]), 3)
expect_equal(length(signal[[3]]), 3)
})
test_that(desc = "Signal Processing Output",
code = {
## check that computation took place
naCheck <- list()
for(i in seq_along(signal)) {
naCheck[[i]] <- sum(sapply(signal[[3]], function(x) {
all(is.na(x))
}))
}
expect_equal(naCheck[[1]], 0)
expect_equal(naCheck[[2]], 0)
expect_equal(naCheck[[3]], 0)
})
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signal)
Autotuner
Autotuner@peak_difference
mmetspFiles <- c(system.file("mzMLs/mtab_mmetsp_ft_120815_24.mzML",
package = "Autotuner"))
mmetspFiles
mmetspFiles <- c(system.file("mzMLs/mtab_mmetsp_ft_120815_24.mzML",
package = "Autotuner"))
runfile <- read.csv(system.file("mmetsp_metadata.csv", package = "mmetspData"),
stringsAsFactors = FALSE)
library(Autotuner)
runfile <- runfile[runfile$File.Name %in% sub(pattern = ".mzML", "",
basename(mmetspFiles)),]
## Loading Autotuner
Autotuner <- createAutotuner(mmetspFiles,
runfile,
file_col = "File.Name",
factorCol = "Sample.Type")
mmetspFiles <- c(system.file("inst/extdata//mtab_mmetsp_ft_120815_24.mzML",
package = "Autotuner"))
mmetspFiles <- c(system.file("extdata/mtab_mmetsp_ft_120815_24.mzML",
package = "Autotuner"))
mmetspFiles
runfile <- read.csv(system.file("extdata/mmetsp_metadata.csv", package = "Autotuner"),
stringsAsFactors = FALSE)
runfile <- read.csv(system.file("extdata/mmetsp_metadata.csv", package = "Autotuner"),
stringsAsFactors = FALSE)
runfile
library(Autotuner)
mmetspFiles <- c(system.file("extdata/mtab_mmetsp_ft_120815_24.mzML",
package = "Autotuner"))
runfile <- read.csv(system.file("extdata/mmetsp_metadata.csv", package = "Autotuner"),
stringsAsFactors = FALSE)
runfile <- runfile[runfile$File.Name %in% sub(pattern = ".mzML", "",
basename(mmetspFiles)),]
runfile
## Loading Autotuner
Autotuner <- createAutotuner(mmetspFiles,
runfile,
file_col = "File.Name",
factorCol = "Sample.Type")
test_that(desc = "Auotuner object creaction",
code = {
# this function runs all tests when called upon
## Checking if Autotuner is able to correctly subset data
## by metadata columns
expect_equal(sum(c(Autotuner@file_col,
Autotuner@factorCol) %in%
colnames(Autotuner@metadata)), 2)
## checking that Autotuner object is constructed with correct
## output
expect_equal(class(Autotuner@time), "list")
expect_equal(class(unlist(Autotuner@time)), "numeric")
expect_equal(class(Autotuner@intensity), "list")
expect_equal(class(unlist(Autotuner@intensity)), "numeric")
expect_equal(class(Autotuner@file_paths), "character")
expect_equal(class(unlist(Autotuner@intensity)), "numeric")
#Autotuner@metadata
#Autotuner@file_paths
})
lag <- 20
threshold<- 3
influence <- 0.1
signal <- lapply(getAutoIntensity(Autotuner), ThresholdingAlgo, lag, threshold,
influence)
test_that(desc = "Signal Processing Structure", code = {
## check that the correct object is returned from signal function
expect_equal(length(signal), 3)
expect_equal(length(signal[[1]]), 3)
expect_equal(length(signal[[2]]), 3)
expect_equal(length(signal[[3]]), 3)
})
signal
test_that(desc = "Signal Processing Structure", code = {
## check that the correct object is returned from signal function
expect_equal(length(signal), 3)
expect_equal(length(signal[[1]]), 3)
#expect_equal(length(signal[[2]]), 3)
#expect_equal(length(signal[[3]]), 3)
})
test_that(desc = "Signal Processing Structure", code = {
## check that the correct object is returned from signal function
expect_equal(length(signal), 1)
expect_equal(length(signal[[1]]), 3)
#expect_equal(length(signal[[2]]), 3)
#expect_equal(length(signal[[3]]), 3)
})
test_that(desc = "Signal Processing Output",
code = {
## check that computation took place
naCheck <- list()
for(i in seq_along(signal)) {
naCheck[[i]] <- sum(sapply(signal[[3]], function(x) {
all(is.na(x))
}))
}
expect_equal(naCheck[[1]], 0)
expect_equal(naCheck[[2]], 0)
expect_equal(naCheck[[3]], 0)
})
test_that(desc = "Signal Processing Output",
code = {
## check that computation took place
naCheck <- list()
for(i in seq_along(signal)) {
naCheck[[i]] <- sum(sapply(signal[[3]], function(x) {
all(is.na(x))
}))
}
expect_equal(naCheck[[1]], 0)
#expect_equal(naCheck[[2]], 0)
#expect_equal(naCheck[[3]], 0)
})
signal
seq_along(signal)
i <- 1
sum(sapply(signal[[3]], function(x) {
all(is.na(x))
}))
naCheck[[i]] <- sum(sapply(signal[[1]], function(x) {
all(is.na(x))
}))
sum(sapply(signal[[1]], function(x) {
all(is.na(x))
}))
test_that(desc = "Signal Processing Output",
code = {
## check that computation took place
naCheck <- list()
for(i in seq_along(signal)) {
naCheck[[i]] <- sum(sapply(signal[[1]], function(x) {
all(is.na(x))
}))
}
expect_equal(naCheck[[1]], 0)
#expect_equal(naCheck[[2]], 0)
#expect_equal(naCheck[[3]], 0)
})
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signal)
context("Preparing things for Autotuner")
#library(devtools)
#if(!require("mmetspData")) {
#    install_github("crmclean/mmetspData")
#}
#library(mmetspData)
mmetspFiles <- c(system.file("extdata/mtab_mmetsp_ft_120815_24.mzML",
package = "Autotuner"),
system.file("extdata/mtab_mmetsp_ft_120815_25.mzML",
package = "Autotuner"))
runfile <- read.csv(system.file("extdata/mmetsp_metadata.csv", package = "Autotuner"),
stringsAsFactors = FALSE)
runfile <- runfile[runfile$File.Name %in% sub(pattern = ".mzML", "",
basename(mmetspFiles)),]
## Loading Autotuner
Autotuner <- createAutotuner(mmetspFiles,
runfile,
file_col = "File.Name",
factorCol = "Sample.Type")
test_that(desc = "Auotuner object creaction",
code = {
# this function runs all tests when called upon
## Checking if Autotuner is able to correctly subset data
## by metadata columns
expect_equal(sum(c(Autotuner@file_col,
Autotuner@factorCol) %in%
colnames(Autotuner@metadata)), 2)
## checking that Autotuner object is constructed with correct
## output
expect_equal(class(Autotuner@time), "list")
expect_equal(class(unlist(Autotuner@time)), "numeric")
expect_equal(class(Autotuner@intensity), "list")
expect_equal(class(unlist(Autotuner@intensity)), "numeric")
expect_equal(class(Autotuner@file_paths), "character")
expect_equal(class(unlist(Autotuner@intensity)), "numeric")
#Autotuner@metadata
#Autotuner@file_paths
})
lag <- 20
threshold<- 3
influence <- 0.1
signal <- lapply(getAutoIntensity(Autotuner), ThresholdingAlgo, lag, threshold,
influence)
test_that(desc = "Signal Processing Structure", code = {
## check that the correct object is returned from signal function
expect_equal(length(signal), 1)
expect_equal(length(signal[[1]]), 3)
expect_equal(length(signal[[2]]), 3)
#expect_equal(length(signal[[3]]), 3)
})
test_that(desc = "Signal Processing Output",
code = {
## check that computation took place
naCheck <- list()
for(i in seq_along(signal)) {
naCheck[[i]] <- sum(sapply(signal[[1]], function(x) {
all(is.na(x))
}))
}
expect_equal(naCheck[[1]], 0)
expect_equal(naCheck[[2]], 0)
#expect_equal(naCheck[[3]], 0)
})
mmetspFiles <- c(system.file("extdata/mtab_mmetsp_ft_120815_24.mzML",
package = "Autotuner"),
system.file("extdata/mtab_mmetsp_ft_120815_25.mzML",
package = "Autotuner"))
runfile <- read.csv(system.file("extdata/mmetsp_metadata.csv", package = "Autotuner"),
stringsAsFactors = FALSE)
runfile <- runfile[runfile$File.Name %in% sub(pattern = ".mzML", "",
basename(mmetspFiles)),]
## Loading Autotuner
Autotuner <- createAutotuner(mmetspFiles,
runfile,
file_col = "File.Name",
factorCol = "Sample.Type")
mmetspFiles <- c(system.file("extdata/mtab_mmetsp_ft_120815_24.mzML",
package = "Autotuner"),
system.file("extdata/mtab_mmetsp_ft_120815_25.mzML",
package = "Autotuner"))
runfile <- read.csv(system.file("extdata/mmetsp_metadata.csv", package = "Autotuner"),
stringsAsFactors = FALSE)
library(Autotuner)
runfile <- runfile[runfile$File.Name %in% sub(pattern = ".mzML", "",
basename(mmetspFiles)),]
## Loading Autotuner
Autotuner <- createAutotuner(mmetspFiles,
runfile,
file_col = "File.Name",
factorCol = "Sample.Type")
test_that(desc = "Auotuner object creaction",
code = {
# this function runs all tests when called upon
## Checking if Autotuner is able to correctly subset data
## by metadata columns
expect_equal(sum(c(Autotuner@file_col,
Autotuner@factorCol) %in%
colnames(Autotuner@metadata)), 2)
## checking that Autotuner object is constructed with correct
## output
expect_equal(class(Autotuner@time), "list")
expect_equal(class(unlist(Autotuner@time)), "numeric")
expect_equal(class(Autotuner@intensity), "list")
expect_equal(class(unlist(Autotuner@intensity)), "numeric")
expect_equal(class(Autotuner@file_paths), "character")
expect_equal(class(unlist(Autotuner@intensity)), "numeric")
#Autotuner@metadata
#Autotuner@file_paths
})
lag <- 20
threshold<- 3
influence <- 0.1
signal <- lapply(getAutoIntensity(Autotuner), ThresholdingAlgo, lag, threshold,
influence)
test_that(desc = "Signal Processing Structure", code = {
## check that the correct object is returned from signal function
expect_equal(length(signal), 1)
expect_equal(length(signal[[1]]), 3)
expect_equal(length(signal[[2]]), 3)
#expect_equal(length(signal[[3]]), 3)
})
## check that the correct object is returned from signal function
expect_equal(length(signal), 2)
test_that(desc = "Signal Processing Structure", code = {
## check that the correct object is returned from signal function
expect_equal(length(signal), 2)
expect_equal(length(signal[[1]]), 3)
expect_equal(length(signal[[2]]), 3)
#expect_equal(length(signal[[3]]), 3)
})
test_that(desc = "Signal Processing Output",
code = {
## check that computation took place
naCheck <- list()
for(i in seq_along(signal)) {
naCheck[[i]] <- sum(sapply(signal[[1]], function(x) {
all(is.na(x))
}))
}
expect_equal(naCheck[[1]], 0)
expect_equal(naCheck[[2]], 0)
#expect_equal(naCheck[[3]], 0)
})
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signal)
test_that(desc = "Checking Function to Return Peaks",
code = {
nullCount <- sum(sapply(Autotuner@peaks, is.null))
expect_equal(nullCount, 0)
expect_equal(ncol(Autotuner@peaks[[1]]) <= 10, TRUE)
})
test_that(desc = "Checking Peakwidth_table",
code = {
expect_equal(class(Autotuner@peak_table), "data.frame")
expect_equal(any(is.na(Autotuner@peak_table)), FALSE)
})
test_that(desc = "Checking peak_time_difference",
code = {
expect_equal(class(Autotuner@peak_difference), "data.frame")
})
#library(testthat)
#library(magrittr)
#library(devtools)
#if(!require("mmetspData")) {
#    install_github("crmclean/mmetspData")
#}
#library(mmetspData)
#library(Autotuner)
mmetspFiles <- c(system.file("extdata/mtab_mmetsp_ft_120815_24.mzML",
package = "Autotuner"),
system.file("extdata/mtab_mmetsp_ft_120815_25.mzML",
package = "Autotuner"))
runfile <- read.csv(system.file("extdata/mmetsp_metadata.csv",
package = "Autotuner"),
stringsAsFactors = FALSE)
runfile <- runfile[runfile$File.Name %in% sub(pattern = ".mzML", "",
basename(mmetspFiles)),]
## Loading Autotuner
Autotuner <- createAutotuner(mmetspFiles,
runfile,
file_col = "File.Name",
factorCol = "Sample.Type")
saveRDS(object = Autotuner, file = here::here("data/preSignalAuto.rds"))
roxygen2::roxygenise()
library(Autotuner)
library(Autotuner)
library(Autotuner)
run_examples()
roxygen2::roxygenise()
library(Autotuner)
run_examples()
library(BiocCheck)
BiocCheck()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(Autotuner)
BiocCheck()
run_examples()
#library(testthat)
#library(magrittr)
#library(devtools)
#if(!require("mmetspData")) {
#    install_github("crmclean/mmetspData")
#}
#library(mmetspData)
#library(Autotuner)
mmetspFiles <- c(system.file("extdata/mtab_mmetsp_ft_120815_24.mzML",
package = "Autotuner"),
system.file("extdata/mtab_mmetsp_ft_120815_25.mzML",
package = "Autotuner"))
runfile <- read.csv(system.file("extdata/mmetsp_metadata.csv",
package = "Autotuner"),
stringsAsFactors = FALSE)
runfile <- runfile[runfile$File.Name %in% sub(pattern = ".mzML", "",
basename(mmetspFiles)),]
## Loading Autotuner
Autotuner <- createAutotuner(mmetspFiles,
runfile,
file_col = "File.Name",
factorCol = "Sample.Type")
#saveRDS(object = Autotuner, file = here::here("data/preSignalAuto.rds"))
lag <- 20
threshold<- 3
influence <- 0.1
signals <- lapply(getAutoIntensity(Autotuner),
ThresholdingAlgo, lag, threshold, influence)
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signals)
## object used to test whole dataset parameter return function
eicParamEsts <- EICparams(Autotuner = Autotuner,
massThresh = .005,
verbose = FALSE,
returnPpmPlots = FALSE,
useGap = TRUE)
saveRDS(object = Autotuner, file = here::here("inst/extdata/postEicAuto.rds"))
source('~/MIT/Research/Autotuner/data-raw/makeTestData.R', echo=TRUE)
library(magrittr)
library(devtools)
library(devtools)
if(!require("mmetspData")) {
install_github("crmclean/mmetspData")
}
library(mmetspData)
library(Autotuner)
mmetspFiles <- c(system.file("mzML/mtab_mmetsp_ft_120815_24.mzML",
package = "mmetspData"),
system.file("mzML/mtab_mmetsp_ft_120815_25.mzML",
package = "mmetspData"))
mmetspFiles
mmetspFiles <- c(system.file("mzMLs/mtab_mmetsp_ft_120815_24.mzML",
package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_25.mzML",
package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_26.mzML",
package = "mmetspData"))
mmetspFiles
runfile <- read.csv(system.file("mmetsp_metadata.csv", package = "mmetspData"),
stringsAsFactors = FALSE)
runfile <- runfile[runfile$File.Name %in% sub(pattern = ".mzML", "",
basename(mmetspFiles)),]
## Loading Autotuner
Autotuner <- createAutotuner(mmetspFiles,
runfile,
file_col = "File.Name",
factorCol = "Sample.Type")
lag <- 20
threshold<- 3
influence <- 0.1
signals <- lapply(getAutoIntensity(Autotuner),
ThresholdingAlgo, lag, threshold, influence)
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signals)
## object used to test whole dataset parameter return function
eicParamEsts <- EICparams(Autotuner = Autotuner,
massThresh = .005,
verbose = FALSE,
returnPpmPlots = FALSE,
useGap = TRUE)
saveRDS(object = eicParamEsts,
file = here::here("inst/extdata/eicParamsEsts.rds"))
roxygen2::roxygenise()
roxygen2::roxygenise()
library(Autotuner)
run_examples()
run_examples()
library(Autotuner)
library(devtools)
if(!require("mmetspData")) {
install_github("crmclean/mmetspData")
library(mmetspData)
}
returnParams
readRDS(system.file("extdata/postEicAuto.rds",package="Autotuner"))
source('~/MIT/Research/Autotuner/data-raw/makeTestData.R', echo=TRUE)
readRDS(system.file("extdata/postEicAuto.rds",package="Autotuner"))
library(Autotuner)
roxygen2::roxygenise()
library(Autotuner)
run_examples()
BiocCheck()
library(Autotuner)
library(Autotuner)
roxygen2::roxygenise()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(Autotuner)
library(devtools)
if(!require("mmetspData")) {
install_github("crmclean/mmetspData")
library(mmetspData)
}
mmetspFiles <- c(system.file("mzMLs/mtab_mmetsp_ft_120815_24.mzML",
package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_25.mzML",
package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_26.mzML",
package = "mmetspData"))
print(basename(mmetspFiles))
print(mmetspFiles)
metadata <- read.csv(system.file("mmetsp_metadata.csv",
package = "mmetspData"),
stringsAsFactors = FALSE)
metadata <- metadata[metadata$File.Name %in%
sub(pattern = ".mzML", "",basename(mmetspFiles)),]
print(metadata)
Autotuner <- createAutotuner(mmetspFiles,
metadata,
file_col = "File.Name",
factorCol = "Sample.Type")
lag <- 25
threshold<- 3.1
influence <- 0.1
signals <- lapply(getAutoIntensity(Autotuner),
ThresholdingAlgo, lag, threshold, influence)
plot_signals(Autotuner,
threshold,
## index for which data files should be displayed
sample_index = 1:3,
signals = signals)
rm(lag, influence, threshold)
Autotuner <- isolatePeaks(Autotuner = Autotuner,
returned_peaks = 10,
signals = signals)
Autotuner
isolatePeaks
roxygen2::roxygenise()
library(Autotuner)
devtools::use_coverage()
usethis::use_coverage()
