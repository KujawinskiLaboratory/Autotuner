variability <- c(ppmSd, noiseSd, prefilSd, prefilScanSd, snEstSd,
maxPwDist,
minPwDist)
rm(ppmSd, noiseSd, prefilSd, prefilScanSd, snEstSd, maxPwDist, minPwDist)
description <- c("Standard Deviation of all PPM Estimates",
"Standard Deviation of all noise Estimates",
'Standard Deviation of all prefileter Intensity Estimates',
"Standard Deviation of all scan coung Estimates",
"Standard Deviation of all s/n threshold Estimates",
"Distance between two highest estimated peak widths",
"Distance between two lowest estimated peak widths")
aggregatedEstimates <- data.frame(Parameters = names(estimates),
estimates = signif(estimates,
digits = 4),
'Variability Measure' = signif(variability,
digits = 4),
"Measure" = description)
return(aggregatedEstimates)
}
returnParams(eicParamEsts, Autotuner)
eicParamEsts <- EICparams(Autotuner = Autotuner,
massThresh = .005,
peak_table = peak_table,
verbose = F,
returnPpmPlots = F,
useGap = T)
eicParamEsts <- EICparams(Autotuner = Autotuner,
massThresh = .005,
peak_table = peak_table,
verbose = F,
returnPpmPlots = F,
useGap = T)
returnParams <- function(eicParamEsts, Autotuner) {
params <- TIC_params(Autotuner@peak_table, Autotuner@peak_difference)
colNameCheck <- all(c("ppm", "peakCount",
"noiseThreshold", "prefilterI",
"prefilterScan",
"TenPercentQuanSN","maxPw", "minPw") %in% colnames(eicParamEsts))
assertthat::assert_that(colNameCheck,
msg = "Error in EICparams: some of the column names from the output are missing. Cannot complete parameter estimation.")
ppmEst <- weighted.mean(eicParamEsts$ppm, eicParamEsts$peakCount)
noiseEst <- min(eicParamEsts$noiseThreshold, na.rm = T)
prefilterIEst <- min(eicParamEsts$prefilterI, na.rm = T)
prefilterScanEst <- min(eicParamEsts$prefilterScan, na.rm = T)
snEst <- min(eicParamEsts$TenPercentQuanSN, na.rm = T)
maxPw <- split(eicParamEsts$maxPw, eicParamEsts$sampleID)
maxPw <- sapply(maxPw, max)
maxPw <- mean(maxPw)
minPw <- min(eicParamEsts$minPw)
estimates <- c(ppm = ppmEst,
noise = noiseEst,
preIntensity = prefilterIEst,
preScan = prefilterScanEst,
snThresh = snEst,
"Max Peakwidth" = maxPw,
"Min Peakwidth" = minPw)
rm(ppmEst,noiseEst,prefilterIEst,prefilterScanEst,snEst,maxPw,minPw)
ppmSd <- sd(eicParamEsts$ppm)
noiseSd <- sd(eicParamEsts$noiseThreshold)
prefilSd <- sd(eicParamEsts$prefilterI, na.rm = T)
prefilScanSd <- sd(eicParamEsts$prefilterScan, na.rm = T)
snEstSd <- sd(eicParamEsts$TenPercentQuanSN, na.rm = T)
maxPwDist <- abs(diff(sort(eicParamEsts$maxPw, decreasing = T))[1])
minPwDist <- abs(diff(sort(eicParamEsts$minPw, decreasing = T))[2])
variability <- c(ppmSd, noiseSd, prefilSd, prefilScanSd, snEstSd,
maxPwDist,
minPwDist)
rm(ppmSd, noiseSd, prefilSd, prefilScanSd, snEstSd, maxPwDist, minPwDist)
description <- c("Standard Deviation of all PPM Estimates",
"Standard Deviation of all noise Estimates",
'Standard Deviation of all prefileter Intensity Estimates',
"Standard Deviation of all scan coung Estimates",
"Standard Deviation of all s/n threshold Estimates",
"Distance between two highest estimated peak widths",
"Distance between two lowest estimated peak widths")
aggregatedEstimates <- data.frame(Parameters = names(estimates),
estimates = signif(estimates,
digits = 4),
'Variability Measure' = signif(variability,
digits = 4),
"Measure" = description)
return(aggregatedEstimates)
}
returnParams(eicParamEsts, Autotuner)
eicParamEsts
library(Autotuner)
eicParamEsts <- EICparams(Autotuner = Autotuner,
massThresh = .005,
peak_table = peak_table,
verbose = F,
returnPpmPlots = F,
useGap = T)
library(Autotuner)
library(devtools)
if(!require("mmetspData")) {
install_github("crmclean/mmetspData")
library(mmetspData)
}
eicParamEsts <- EICparams(Autotuner = Autotuner,
eicParamEsts
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(Autotuner)
library(devtools)
if(!require("mmetspData")) {
install_github("crmclean/mmetspData")
library(mmetspData)
}
mmetspFiles <- c(system.file("mzMLs/mtab_mmetsp_ft_120815_24.mzML", package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_25.mzML", package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_26.mzML", package = "mmetspData"))
print(basename(mmetspFiles))
metadata <- read.csv(system.file("mmetsp_metadata.csv", package = "mmetspData"),
stringsAsFactors = F)
metadata <- metadata[metadata$File.Name %in%
sub(pattern = ".mzML", "",basename(mmetspFiles)),]
print(metadata)
Autotuner <- createAutotuner(mmetspFiles,
metadata,
file_col = "File.Name",
factorCol = "Sample.Type")
lag <- 30
threshold<- 3.5
influence <- 0.3
signals <- lapply(getAutoIntensity(Autotuner),
ThresholdingAlgo, lag, threshold, influence)
plot_signals(Autotuner,
threshold,
## index for which data files should be displayed
sample_index = 1:3,
signals = signals)
rm(lag, influence, threshold)
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signals)
for(i in unique(peak_difference$index)) {
plot_peaks(Autotuner = Autotuner,
boundary = 100,
peak = i,
peak_table = peak_table,
peak_difference = peak_difference)
}
peak_table
source('~/MIT/Research/Autotuner/R/plot_peaks.R', echo=TRUE)
plot_peaks(Autotuner = Autotuner,
boundary = 100,
peak = i)
for(i in unique(peak_difference$index)) {
plot_peaks(Autotuner = Autotuner,
boundary = 100,
peak = i)
}
library(Autotuner)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(Autotuner)
library(devtools)
if(!require("mmetspData")) {
install_github("crmclean/mmetspData")
library(mmetspData)
}
mmetspFiles <- c(system.file("mzMLs/mtab_mmetsp_ft_120815_24.mzML", package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_25.mzML", package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_26.mzML", package = "mmetspData"))
print(basename(mmetspFiles))
metadata <- read.csv(system.file("mmetsp_metadata.csv", package = "mmetspData"),
stringsAsFactors = F)
metadata <- metadata[metadata$File.Name %in%
sub(pattern = ".mzML", "",basename(mmetspFiles)),]
print(metadata)
Autotuner <- createAutotuner(mmetspFiles,
metadata,
file_col = "File.Name",
factorCol = "Sample.Type")
lag <- 30
threshold<- 3.5
influence <- 0.3
signals <- lapply(getAutoIntensity(Autotuner),
ThresholdingAlgo, lag, threshold, influence)
plot_signals(Autotuner,
threshold,
## index for which data files should be displayed
sample_index = 1:3,
signals = signals)
rm(lag, influence, threshold)
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signals)
for(i in unique(peak_difference$index)) {
plot_peaks(Autotuner = Autotuner,
boundary = 100,
peak = i)
}
for(i in unique(peak_difference$index)) {
plot_peaks(Autotuner = Autotuner,
boundary = 100,
peak = i)
}
library(magrittr)
for(i in unique(peak_difference$index)) {
plot_peaks(Autotuner = Autotuner,
boundary = 100,
peak = i)
}
roxygen2::roxygenise()
## error with peak width estimation
## idea - filter things by mass. smaler masses are more likely to be random assosications
eicParamEsts <- EICparams(Autotuner = Autotuner,
massThresh = .005,
peak_table = peak_table,
verbose = F,
returnPpmPlots = F,
useGap = T)
eicParamEsts
Autotuner = Autotuner
massThresh = .005
peak_table <- Autotuner@peak_table
# Checking input ----------------------------------------------------------
assertthat::assert_that(nrow(peak_table) > 0,
msg = "Peak table with 0 rows was entered into EICparams function.")
if(returnPpmPlots) {
if(!dir.exists(plotDir)) {
message("Directory in plotDir did not exist. Using the current working directory instead.")
plotDir <- "."
}
}
# itterating between samples ----------------------------------------------
totalEstimates <- list()
j <- 1
source('~/MIT/Research/Autotuner/R/EICParams.R', echo=TRUE)
message("Currently on sample ", j)
currentTable <- peak_table[peak_table$Sample == j,]
currentFile <- Autotuner@file_paths[j]
# Adding msnbase functionality to replace mzR API
msnObj <- suppressMessages(MSnbase::readMSData(files = currentFile,
mode = "onDisk",
msLevel. = 1))
header <- suppressWarnings( MSnbase::header(msnObj))
allMzs <- MSnbase::mz(msnObj)
allInt <- MSnbase::intensity(msnObj)
mzDb <- list()
for(i in seq_along(allInt)) {
mzDb[[i]] <- cbind(mz = allMzs[[i]],
intensity = allInt[[i]])
}
rm(allMzs, allInt, msnObj, i)
# going through each peak from a sample -----------------------------
pickedParams <- list()
curPeak
curPeak <- 5
message("--- Currently on peak: ", curPeak)
start <- currentTable[curPeak,"Start_time"]
end <- currentTable[curPeak,"End_time"]
width <- currentTable$peak_width[curPeak]
observedPeak <- list(start = start, end = end)
estimatedPeakParams <- checkEICPeaks(mzDb = mzDb,
header = header,
observedPeak = observedPeak,
massThresh,
useGap, varExpThresh,
returnPpmPlots, plotDir,
filename = basename(currentFile))
useGap = T
estimatedPeakParams <- checkEICPeaks(mzDb = mzDb,
header = header,
observedPeak = observedPeak,
massThresh,
useGap, varExpThresh,
returnPpmPlots, plotDir,
filename = basename(currentFile))
returnPpmPlots
returnPpmPlots <-
F
estimatedPeakParams <- checkEICPeaks(mzDb = mzDb,
header = header,
observedPeak = observedPeak,
massThresh,
useGap, varExpThresh,
returnPpmPlots, plotDir,
filename = basename(currentFile))
estimatedPeakParams
rm(peak_difference)
rm(peak_table)
roxygen2::roxygenize()
library(Autotuner)
library(Autotuner)
library(devtools)
if(!require("mmetspData")) {
install_github("crmclean/mmetspData")
library(mmetspData)
}
## error with peak width estimation
## idea - filter things by mass. smaler masses are more likely to be random assosications
eicParamEsts <- EICparams(Autotuner = Autotuner,
massThresh = .005,
verbose = F,
returnPpmPlots = F,
useGap = T)
eicParamEsts
returnParams(eicParamEsts, Autotuner)
params
params <- TIC_params(Autotuner@peak_table, Autotuner@peak_difference)
params
params <- TIC_params(Autotuner@peak_table, Autotuner@peak_difference)
colNameCheck <- all(c("ppm", "peakCount",
"noiseThreshold", "prefilterI",
"prefilterScan",
"TenPercentQuanSN","maxPw", "minPw") %in% colnames(eicParamEsts))
assertthat::assert_that(colNameCheck,
msg = "Error in EICparams: some of the column names from the output are missing. Cannot complete parameter estimation.")
colNameCheck
params
data.frame(descriptions = names(params), estimates = unlist(params))
params <- data.frame(descriptions = names(params), estimates = unlist(params))
params
output <- list(eicParams = aggregatedEstimates, ticParams = params)
roxygen2::roxygenize()
returnParams(eicParamEsts, Autotuner)
library(Autotuner)
library(Autotuner)
library(devtools)
if(!require("mmetspData")) {
install_github("crmclean/mmetspData")
library(mmetspData)
}
returnParams(eicParamEsts, Autotuner)
source('~/MIT/Research/Autotuner/R/returnParams.R', echo=TRUE)
returnParams(eicParamEsts, Autotuner)
source('~/MIT/Research/Autotuner/data-raw/makeTestData.R', echo=TRUE)
source('~/MIT/Research/Autotuner/data-raw/makeTestData.R', echo=TRUE)
library(testthat)
library(magrittr)
library(devtools)
if(!require("mmetspData")) {
install_github("crmclean/mmetspData")
}
library(mmetspData)
library(Autotuner)
mmetspFiles <- c(system.file("mzMLs/mtab_mmetsp_ft_120815_24.mzML", package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_25.mzML", package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_26.mzML", package = "mmetspData"))
runfile <- read.csv(system.file("mmetsp_metadata.csv", package = "mmetspData"),
stringsAsFactors = F)
runfile <- runfile[runfile$File.Name %in% sub(pattern = ".mzML", "", basename(mmetspFiles)),]
## Loading Autotuner
Autotuner <- createAutotuner(mmetspFiles,
runfile,
file_col = "File.Name",
factorCol = "Sample.Type")
lag <- 20
threshold<- 3
influence <- 0.1
signals <- lapply(getAutoIntensity(Autotuner),
ThresholdingAlgo, lag, threshold, influence)
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signals)
eicParamEsts <- EICparams(Autotuner = Autotuner,
massThresh = .005,
verbose = F,
returnPpmPlots = F,
useGap = T)
eicParamEsts
saveRDS(eicParamEsts, file = "data/eicParamEsts.rda")
saveRDS(Autotuner, file = "data/Autotuner.rda")
source('~/MIT/Research/Autotuner/tests/testthat/test_paramSummary.R', echo=TRUE)
saveRDS(Autotuner, file = "data/Autotuner.rda")
Autotuner
readRDS("data/Autotuner.rda")
roxygen2::roxygenise()
readRDS("data/Autotuner.rds")
saveRDS(Autotuner, file = "data/Autotuner.rds")
readRDS("data/Autotuner.rds")
library(Autotuner)
# itterating between samples ----------------------------------------------
data("Autotuner", package="Autotuner")
eicParamEsts
library(testthat)
library(magrittr)
library(devtools)
if(!require("mmetspData")) {
install_github("crmclean/mmetspData")
}
library(mmetspData)
library(Autotuner)
mmetspFiles <- c(system.file("mzMLs/mtab_mmetsp_ft_120815_24.mzML", package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_25.mzML", package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_26.mzML", package = "mmetspData"))
runfile <- read.csv(system.file("mmetsp_metadata.csv", package = "mmetspData"),
stringsAsFactors = F)
runfile <- runfile[runfile$File.Name %in% sub(pattern = ".mzML", "", basename(mmetspFiles)),]
## Loading Autotuner
Autotuner <- createAutotuner(mmetspFiles,
runfile,
file_col = "File.Name",
factorCol = "Sample.Type")
lag <- 20
threshold<- 3
influence <- 0.1
signals <- lapply(getAutoIntensity(Autotuner),
ThresholdingAlgo, lag, threshold, influence)
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signals)
## object used to test whole dataset parameter return function
eicParamEsts <- EICparams(Autotuner = Autotuner,
massThresh = .005,
verbose = F,
returnPpmPlots = F,
useGap = T)
library(Autotuner)
library(testthat)
library(magrittr)
library(devtools)
if(!require("mmetspData")) {
install_github("crmclean/mmetspData")
}
library(mmetspData)
library(Autotuner)
mmetspFiles <- c(system.file("mzMLs/mtab_mmetsp_ft_120815_24.mzML", package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_25.mzML", package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_26.mzML", package = "mmetspData"))
runfile <- read.csv(system.file("mmetsp_metadata.csv", package = "mmetspData"),
stringsAsFactors = F)
runfile <- runfile[runfile$File.Name %in% sub(pattern = ".mzML", "", basename(mmetspFiles)),]
## Loading Autotuner
Autotuner <- createAutotuner(mmetspFiles,
runfile,
file_col = "File.Name",
factorCol = "Sample.Type")
lag <- 20
threshold<- 3
influence <- 0.1
signals <- lapply(getAutoIntensity(Autotuner),
ThresholdingAlgo, lag, threshold, influence)
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signals)
## object used to test whole dataset parameter return function
eicParamEsts <- EICparams(Autotuner = Autotuner,
massThresh = .005,
verbose = F,
returnPpmPlots = F,
useGap = T)
EICparams
## object used to test whole dataset parameter return function
eicParamEsts <- Autotuner::EICparams(Autotuner = Autotuner,
massThresh = .005,
verbose = F,
returnPpmPlots = F,
useGap = T)
EICparams
library(testthat)
library(magrittr)
library(devtools)
if(!require("mmetspData")) {
install_github("crmclean/mmetspData")
}
library(mmetspData)
library(Autotuner)
mmetspFiles <- c(system.file("mzMLs/mtab_mmetsp_ft_120815_24.mzML", package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_25.mzML", package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_26.mzML", package = "mmetspData"))
runfile <- read.csv(system.file("mmetsp_metadata.csv", package = "mmetspData"),
stringsAsFactors = F)
runfile <- runfile[runfile$File.Name %in% sub(pattern = ".mzML", "", basename(mmetspFiles)),]
## Loading Autotuner
Autotuner <- createAutotuner(mmetspFiles,
runfile,
file_col = "File.Name",
factorCol = "Sample.Type")
createAutotuner
library(Autotuner)
roxygen2::roxygenise()
library(Autotuner)
## object used to test whole dataset parameter return function
eicParamEsts <- EICparams(Autotuner = Autotuner,
massThresh = .005,
verbose = F,
returnPpmPlots = F,
useGap = T)
library(testthat)
library(magrittr)
library(devtools)
if(!require("mmetspData")) {
install_github("crmclean/mmetspData")
}
library(mmetspData)
library(Autotuner)
mmetspFiles <- c(system.file("mzMLs/mtab_mmetsp_ft_120815_24.mzML", package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_25.mzML", package = "mmetspData"),
system.file("mzMLs/mtab_mmetsp_ft_120815_26.mzML", package = "mmetspData"))
runfile <- read.csv(system.file("mmetsp_metadata.csv", package = "mmetspData"),
stringsAsFactors = F)
runfile <- runfile[runfile$File.Name %in% sub(pattern = ".mzML", "", basename(mmetspFiles)),]
## Loading Autotuner
Autotuner <- createAutotuner(mmetspFiles,
runfile,
file_col = "File.Name",
factorCol = "Sample.Type")
lag <- 20
threshold<- 3
influence <- 0.1
signals <- lapply(getAutoIntensity(Autotuner),
ThresholdingAlgo, lag, threshold, influence)
Autotuner <- isolatePeaks(Autotuner, returned_peaks = 10, signals)
## object used to test whole dataset parameter return function
eicParamEsts <- EICparams(Autotuner = Autotuner,
massThresh = .005,
verbose = F,
returnPpmPlots = F,
useGap = T)
eicParamEsts
ncol(eicParamEsts)
source('~/MIT/Research/Autotuner/R/data.R', echo=TRUE)
library(Autotuner)
roxygen2::roxygenise()
roxygen2::roxygenise()
