peak_difference$cur_row[row])
match_rows <- c(peak_difference$cur_row[row],
peak_difference$next_row[same_peak])
row_update <- row + 2
} else {
match_rows <- c(peak_difference[row,"cur_row"],
peak_difference[row,"next_row"])
row_update <- row + 1
} # end of update to itterator
row_update
colors <- 1:length(unique(peak_table$Sample))
if(length(boundary) == 0) {
boundary <- 1
}
# making plots ---------------------------------------------------------
lapply(1:length(match_rows), function(row_index) {
## renaming info for clarity
current_row <- match_rows[row_index]
sample_index <- peak_table$Sample[current_row]
## extracting relevant info to plot figures
bdd_names <- peak_table[current_row,] %>%
dplyr::select(dplyr::contains("name"))
time <- Autotuner@time[[sample_index]]
intensity <- Autotuner@intensity[[sample_index]]
bdd_points <- which(names(time) %in% unlist(bdd_names))
peak_interval <- c(0,0)
if((bdd_points[1] - boundary) < 1) {
peak_interval[1] <- 1
} else {
peak_interval[1] <- bdd_points[1]-boundary
}
if((bdd_points[2]+boundary) > length(time)) {
peak_interval[2] <- length(time)
} else {
peak_interval[2] <- bdd_points[2]+boundary
}
peak_interval <- peak_interval[1]:peak_interval[2]
if(row_index == 1) {
upper_bdd <- peak_difference$max_intensity[row] +
peak_difference$max_intensity[row]/
log(peak_difference$max_intensity[row])
plot(time[peak_interval],
intensity[peak_interval],
type = "l",
xlab = "Time (s)",
ylab = "Intensity",
main = paste("Max Peak Width:",
signif(max(peak_difference$Max_width)), "(s)"),
col = colors[peak_table$Sample[current_row]],
ylim = c(0, upper_bdd))
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
} else {
lines(time[peak_interval],
intensity[peak_interval],
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
}
}) # end of plotting function
legend("topleft",
legend = sample_names[peak_table$Sample[match_rows]],
col = colors,
cex = 0.75,
fill = which(sample_names %in%
sample_names[peak_table$Sample[match_rows]]))
peak_counter <- 1 + peak_counter
row <- row_update
peak_difference <- Autotuner@peak_difference
peak_difference
i <- 2
peak <- 2
# extracting relevant values from input args ------------------------------
factorCol <- Autotuner@factorCol
metadata <- Autotuner@metadata
peak_difference <- Autotuner@peak_difference
peak_table <- Autotuner@peak_table
peak_difference <- peak_difference %>%
dplyr::filter(.data$index == peak)
peak_table <- peak_table
sample_names <- unlist(metadata[,factorCol])
sample_names <- paste(sample_names, 1:length(sample_names))
row <- 1
peak_counter <- 1
while(row <= nrow(peak_difference)) {
# Updating the itterator for the while loop ----------------------------
if(row < dim(peak_difference)[1] && identical(
peak_difference$cur_row[row],peak_difference$cur_row[row+1])) {
same_peak <- which(peak_difference$cur_row ==
peak_difference$cur_row[row])
match_rows <- c(peak_difference$cur_row[row],
peak_difference$next_row[same_peak])
row_update <- row + 2
} else {
match_rows <- c(peak_difference[row,"cur_row"],
peak_difference[row,"next_row"])
row_update <- row + 1
} # end of update to itterator
colors <- 1:length(unique(peak_table$Sample))
if(length(boundary) == 0) {
boundary <- 1
}
# making plots ---------------------------------------------------------
lapply(1:length(match_rows), function(row_index) {
## renaming info for clarity
current_row <- match_rows[row_index]
sample_index <- peak_table$Sample[current_row]
## extracting relevant info to plot figures
bdd_names <- peak_table[current_row,] %>%
dplyr::select(dplyr::contains("name"))
time <- Autotuner@time[[sample_index]]
intensity <- Autotuner@intensity[[sample_index]]
bdd_points <- which(names(time) %in% unlist(bdd_names))
peak_interval <- c(0,0)
if((bdd_points[1] - boundary) < 1) {
peak_interval[1] <- 1
} else {
peak_interval[1] <- bdd_points[1]-boundary
}
if((bdd_points[2]+boundary) > length(time)) {
peak_interval[2] <- length(time)
} else {
peak_interval[2] <- bdd_points[2]+boundary
}
peak_interval <- peak_interval[1]:peak_interval[2]
if(row_index == 1) {
upper_bdd <- peak_difference$max_intensity[row] +
peak_difference$max_intensity[row]/
log(peak_difference$max_intensity[row])
plot(time[peak_interval],
intensity[peak_interval],
type = "l",
xlab = "Time (s)",
ylab = "Intensity",
main = paste("Max Peak Width:",
signif(max(peak_difference$Max_width)), "(s)"),
col = colors[peak_table$Sample[current_row]],
ylim = c(0, upper_bdd))
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
} else {
lines(time[peak_interval],
intensity[peak_interval],
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
}
}) # end of plotting function
legend("topleft",
legend = sample_names[peak_table$Sample[match_rows]],
col = colors,
cex = 0.75,
fill = which(sample_names %in%
sample_names[peak_table$Sample[match_rows]]))
peak_counter <- 1 + peak_counter
row <- row_update
} # end of while loop
# extracting relevant values from input args ------------------------------
factorCol <- Autotuner@factorCol
metadata <- Autotuner@metadata
peak_difference <- Autotuner@peak_difference
peak_table <- Autotuner@peak_table
peak_difference
peak_difference %>%
dplyr::filter(.data$index == peak)
peak_table
factorCol
metadata
peak_table
peak_difference <- peak_difference %>%
dplyr::filter(.data$index == peak)
peak_table <- peak_table
sample_names <- unlist(metadata[,factorCol])
sample_names <- paste(sample_names, 1:length(sample_names))
row <- 1
peak_counter <- 1
peak_difference
peak_table
nrow(peak_difference)
row <-1
# Updating the itterator for the while loop ----------------------------
if(row < dim(peak_difference)[1] && identical(
peak_difference$cur_row[row],peak_difference$cur_row[row+1])) {
same_peak <- which(peak_difference$cur_row ==
peak_difference$cur_row[row])
match_rows <- c(peak_difference$cur_row[row],
peak_difference$next_row[same_peak])
row_update <- row + 2
} else {
match_rows <- c(peak_difference[row,"cur_row"],
peak_difference[row,"next_row"])
row_update <- row + 1
} # end of update to itterator
row_update
peak_difference
colors <- 1:length(unique(peak_table$Sample))
if(length(boundary) == 0) {
boundary <- 1
}
colors
boundary
# making plots ---------------------------------------------------------
lapply(1:length(match_rows), function(row_index) {
## renaming info for clarity
current_row <- match_rows[row_index]
sample_index <- peak_table$Sample[current_row]
## extracting relevant info to plot figures
bdd_names <- peak_table[current_row,] %>%
dplyr::select(dplyr::contains("name"))
time <- Autotuner@time[[sample_index]]
intensity <- Autotuner@intensity[[sample_index]]
bdd_points <- which(names(time) %in% unlist(bdd_names))
peak_interval <- c(0,0)
if((bdd_points[1] - boundary) < 1) {
peak_interval[1] <- 1
} else {
peak_interval[1] <- bdd_points[1]-boundary
}
if((bdd_points[2]+boundary) > length(time)) {
peak_interval[2] <- length(time)
} else {
peak_interval[2] <- bdd_points[2]+boundary
}
peak_interval <- peak_interval[1]:peak_interval[2]
if(row_index == 1) {
upper_bdd <- peak_difference$max_intensity[row] +
peak_difference$max_intensity[row]/
log(peak_difference$max_intensity[row])
plot(time[peak_interval],
intensity[peak_interval],
type = "l",
xlab = "Time (s)",
ylab = "Intensity",
main = paste("Max Peak Width:",
signif(max(peak_difference$Max_width)), "(s)"),
col = colors[peak_table$Sample[current_row]],
ylim = c(0, upper_bdd))
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
} else {
lines(time[peak_interval],
intensity[peak_interval],
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
}
}) # end of plotting function
row_index
1:length(match_rows)
row_index <- 1
## renaming info for clarity
current_row <- match_rows[row_index]
sample_index <- peak_table$Sample[current_row]
current_row
sample_index
current_row
peak_table
peak_table[current_row,]
peak_table[current_row,] %>%
dplyr::select(dplyr::contains("name"))
time <- Autotuner@time[[sample_index]]
intensity <- Autotuner@intensity[[sample_index]]
bdd_points <- which(names(time) %in% unlist(bdd_names))
time
bdd_names
View(peak_table)
## extracting relevant info to plot figures
bdd_names <- peak_table[current_row,] %>%
dplyr::select(dplyr::contains("name"))
bdd_names
bdd_points <- which(names(time) %in% unlist(bdd_names))
bdd_points
peak_interval <- c(0,0)
if((bdd_points[1] - boundary) < 1) {
peak_interval[1] <- 1
} else {
peak_interval[1] <- bdd_points[1]-boundary
}
if((bdd_points[2]+boundary) > length(time)) {
peak_interval[2] <- length(time)
} else {
peak_interval[2] <- bdd_points[2]+boundary
}
peak_interval <- peak_interval[1]:peak_interval[2]
row_index == 1
upper_bdd <- peak_difference$max_intensity[row] +
peak_difference$max_intensity[row]/
log(peak_difference$max_intensity[row])
plot(time[peak_interval],
intensity[peak_interval],
type = "l",
xlab = "Time (s)",
ylab = "Intensity",
main = paste("Max Peak Width:",
signif(max(peak_difference$Max_width)), "(s)"),
col = colors[peak_table$Sample[current_row]],
ylim = c(0, upper_bdd))
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
row_index <- 2
## renaming info for clarity
current_row <- match_rows[row_index]
sample_index <- peak_table$Sample[current_row]
## extracting relevant info to plot figures
bdd_names <- peak_table[current_row,] %>%
dplyr::select(dplyr::contains("name"))
time <- Autotuner@time[[sample_index]]
intensity <- Autotuner@intensity[[sample_index]]
bdd_points <- which(names(time) %in% unlist(bdd_names))
peak_interval <- c(0,0)
if((bdd_points[1] - boundary) < 1) {
peak_interval[1] <- 1
} else {
peak_interval[1] <- bdd_points[1]-boundary
}
if((bdd_points[2]+boundary) > length(time)) {
peak_interval[2] <- length(time)
} else {
peak_interval[2] <- bdd_points[2]+boundary
}
peak_interval <- peak_interval[1]:peak_interval[2]
if(row_index == 1) {
upper_bdd <- peak_difference$max_intensity[row] +
peak_difference$max_intensity[row]/
log(peak_difference$max_intensity[row])
plot(time[peak_interval],
intensity[peak_interval],
type = "l",
xlab = "Time (s)",
ylab = "Intensity",
main = paste("Max Peak Width:",
signif(max(peak_difference$Max_width)), "(s)"),
col = colors[peak_table$Sample[current_row]],
ylim = c(0, upper_bdd))
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
} else {
lines(time[peak_interval],
intensity[peak_interval],
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
}
row_index <- 3
## renaming info for clarity
current_row <- match_rows[row_index]
sample_index <- peak_table$Sample[current_row]
## extracting relevant info to plot figures
bdd_names <- peak_table[current_row,] %>%
dplyr::select(dplyr::contains("name"))
time <- Autotuner@time[[sample_index]]
intensity <- Autotuner@intensity[[sample_index]]
bdd_points <- which(names(time) %in% unlist(bdd_names))
peak_interval <- c(0,0)
if((bdd_points[1] - boundary) < 1) {
peak_interval[1] <- 1
} else {
peak_interval[1] <- bdd_points[1]-boundary
}
if((bdd_points[2]+boundary) > length(time)) {
peak_interval[2] <- length(time)
} else {
peak_interval[2] <- bdd_points[2]+boundary
}
peak_interval <- peak_interval[1]:peak_interval[2]
if(row_index == 1) {
upper_bdd <- peak_difference$max_intensity[row] +
peak_difference$max_intensity[row]/
log(peak_difference$max_intensity[row])
plot(time[peak_interval],
intensity[peak_interval],
type = "l",
xlab = "Time (s)",
ylab = "Intensity",
main = paste("Max Peak Width:",
signif(max(peak_difference$Max_width)), "(s)"),
col = colors[peak_table$Sample[current_row]],
ylim = c(0, upper_bdd))
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
} else {
lines(time[peak_interval],
intensity[peak_interval],
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
}
row_index <- 4
## renaming info for clarity
current_row <- match_rows[row_index]
sample_index <- peak_table$Sample[current_row]
## extracting relevant info to plot figures
bdd_names <- peak_table[current_row,] %>%
dplyr::select(dplyr::contains("name"))
time <- Autotuner@time[[sample_index]]
intensity <- Autotuner@intensity[[sample_index]]
bdd_points <- which(names(time) %in% unlist(bdd_names))
peak_interval <- c(0,0)
if((bdd_points[1] - boundary) < 1) {
peak_interval[1] <- 1
} else {
peak_interval[1] <- bdd_points[1]-boundary
}
if((bdd_points[2]+boundary) > length(time)) {
peak_interval[2] <- length(time)
} else {
peak_interval[2] <- bdd_points[2]+boundary
}
peak_interval <- peak_interval[1]:peak_interval[2]
if(row_index == 1) {
upper_bdd <- peak_difference$max_intensity[row] +
peak_difference$max_intensity[row]/
log(peak_difference$max_intensity[row])
plot(time[peak_interval],
intensity[peak_interval],
type = "l",
xlab = "Time (s)",
ylab = "Intensity",
main = paste("Max Peak Width:",
signif(max(peak_difference$Max_width)), "(s)"),
col = colors[peak_table$Sample[current_row]],
ylim = c(0, upper_bdd))
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
} else {
lines(time[peak_interval],
intensity[peak_interval],
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
}
row_index <- 6
peak
## renaming info for clarity
current_row <- match_rows[row_index]
sample_index <- peak_table$Sample[current_row]
## extracting relevant info to plot figures
bdd_names <- peak_table[current_row,] %>%
dplyr::select(dplyr::contains("name"))
time <- Autotuner@time[[sample_index]]
intensity <- Autotuner@intensity[[sample_index]]
bdd_points <- which(names(time) %in% unlist(bdd_names))
peak_interval <- c(0,0)
if((bdd_points[1] - boundary) < 1) {
peak_interval[1] <- 1
} else {
peak_interval[1] <- bdd_points[1]-boundary
}
if((bdd_points[2]+boundary) > length(time)) {
peak_interval[2] <- length(time)
} else {
peak_interval[2] <- bdd_points[2]+boundary
}
peak_interval <- peak_interval[1]:peak_interval[2]
if(row_index == 1) {
upper_bdd <- peak_difference$max_intensity[row] +
peak_difference$max_intensity[row]/
log(peak_difference$max_intensity[row])
plot(time[peak_interval],
intensity[peak_interval],
type = "l",
xlab = "Time (s)",
ylab = "Intensity",
main = paste("Max Peak Width:",
signif(max(peak_difference$Max_width)), "(s)"),
col = colors[peak_table$Sample[current_row]],
ylim = c(0, upper_bdd))
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
} else {
lines(time[peak_interval],
intensity[peak_interval],
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[1]], lty = 5,
col = colors[peak_table$Sample[current_row]])
abline(v = time[bdd_points[2]], lty = 5,
col = colors[peak_table$Sample[current_row]])
}
legend("topleft",
legend = sample_names[peak_table$Sample[match_rows]],
col = colors,
cex = 0.75,
fill = which(sample_names %in%
sample_names[peak_table$Sample[match_rows]]))
